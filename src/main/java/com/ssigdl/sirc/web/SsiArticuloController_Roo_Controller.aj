// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ssigdl.sirc.web;

import com.ssigdl.sirc.domain.SsiArticulo;
import com.ssigdl.sirc.domain.SsiArticuloUnidadMedida;
import com.ssigdl.sirc.domain.SsiCategoria;
import com.ssigdl.sirc.domain.SsiFacturaArticuloRel;
import com.ssigdl.sirc.web.SsiArticuloController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect SsiArticuloController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String SsiArticuloController.create(@Valid SsiArticulo ssiArticulo, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ssiArticulo);
            return "ssiarticuloes/create";
        }
        uiModel.asMap().clear();
        ssiArticulo.persist();
        return "redirect:/ssiarticuloes/" + encodeUrlPathSegment(ssiArticulo.getArtId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String SsiArticuloController.createForm(Model uiModel) {
        populateEditForm(uiModel, new SsiArticulo());
        return "ssiarticuloes/create";
    }
    
    @RequestMapping(value = "/{artId}", produces = "text/html")
    public String SsiArticuloController.show(@PathVariable("artId") Integer artId, Model uiModel) {
        uiModel.addAttribute("ssiarticulo", SsiArticulo.findSsiArticulo(artId));
        uiModel.addAttribute("itemId", artId);
        return "ssiarticuloes/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String SsiArticuloController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("ssiarticuloes", SsiArticulo.findSsiArticuloEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) SsiArticulo.countSsiArticuloes() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ssiarticuloes", SsiArticulo.findAllSsiArticuloes(sortFieldName, sortOrder));
        }
        return "ssiarticuloes/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String SsiArticuloController.update(@Valid SsiArticulo ssiArticulo, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, ssiArticulo);
            return "ssiarticuloes/update";
        }
        uiModel.asMap().clear();
        ssiArticulo.merge();
        return "redirect:/ssiarticuloes/" + encodeUrlPathSegment(ssiArticulo.getArtId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{artId}", params = "form", produces = "text/html")
    public String SsiArticuloController.updateForm(@PathVariable("artId") Integer artId, Model uiModel) {
        populateEditForm(uiModel, SsiArticulo.findSsiArticulo(artId));
        return "ssiarticuloes/update";
    }
    
    @RequestMapping(value = "/{artId}", method = RequestMethod.DELETE, produces = "text/html")
    public String SsiArticuloController.delete(@PathVariable("artId") Integer artId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        SsiArticulo ssiArticulo = SsiArticulo.findSsiArticulo(artId);
        ssiArticulo.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ssiarticuloes";
    }
    
    void SsiArticuloController.populateEditForm(Model uiModel, SsiArticulo ssiArticulo) {
        uiModel.addAttribute("ssiArticulo", ssiArticulo);
        uiModel.addAttribute("ssiarticulounidadmedidas", SsiArticuloUnidadMedida.findAllSsiArticuloUnidadMedidas());
        uiModel.addAttribute("ssicategorias", SsiCategoria.findAllSsiCategorias());
        uiModel.addAttribute("ssifacturaarticulorels", SsiFacturaArticuloRel.findAllSsiFacturaArticuloRels());
    }
    
    String SsiArticuloController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
